@model CS4790A3.Models.RegModel

@{
    ViewBag.Title = "Runner Registration";
}

<div class="jumbotron">
    <h1>Runner Registration</h1>
    <p class="lead">Register for 5K Run</p>
    <p></p>
</div>
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="row">
        <div class="col-md-7">
            <p>
            

                    <div class="form-horizontal">
                        <h4>Registrant</h4>
                        <hr />
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.Contact.Id)

                        <div class="form-group">
                            @Html.LabelFor(model => model.Contact.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Contact.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Contact.FirstName, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Contact.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Contact.LastName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Contact.LastName, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group" >
                            @Html.LabelFor(model => model.Contact.suffix, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                <span style="display: inline-block; max-width: 110px;">
                                    @Html.EditorFor(model => model.Contact.suffix, new { htmlAttributes = new { @class = "form-control" } })
                                </span>
                                @Html.ValidationMessageFor(model => model.Contact.suffix, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Contact.anonymous, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                <div class="checkbox">
                                    <span style="margin-left: 20px;">
                                        @Html.EditorFor(model => model.Contact.anonymous)
                                    </span>
                                    @Html.ValidationMessageFor(model => model.Contact.anonymous, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Contact.phone, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Contact.phone, new { htmlAttributes = new { @class = "form-control", onkeyup = "phoneMask('Contact.phone', event)" } })
                                @Html.ValidationMessageFor(model => model.Contact.phone, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Contact.email, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Contact.email, new { htmlAttributes = new { @class = "form-control", id="email" } })
                                @Html.ValidationMessageFor(model => model.Contact.email, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.confirmEmail, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.confirmEmail, new { htmlAttributes = new { @class = "form-control", id="confirm"} })
                                @Html.ValidationMessageFor(model => model.confirmEmail, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Contact.T_shirt, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                <span style="display: inline-block; max-width: 80px;">
                                    @Html.EditorFor(model => model.Contact.T_shirt, new { htmlAttributes = new { @class = "form-control" } })
                                </span>
                                @Html.ValidationMessageFor(model => model.Contact.T_shirt, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Contact.e_contact, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Contact.e_contact, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Contact.e_contact, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Contact.e_phone, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Contact.e_phone, new { htmlAttributes = new { @class = "form-control", onkeyup = "phoneMask('Contact.e_phone', event)" } })
                                @Html.ValidationMessageFor(model => model.Contact.e_phone, "", new { @class = "text-danger" })
                            </div>
                        </div>

                    
                    </div>
            
            </p>
        </div>
        <div class="col-md-5">
            <h2>Runners</h2>
            <p>
                <table class="table">
                    <tr>
                        <th>
                            @Html.DisplayNameFor(model => model.Runners[0].firstName)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Runners[0].lastName)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Runners[0].tShirt)
                        </th>
                    </tr>
                    @for(var dex = 0; dex<10; dex++)
                    {   
                        
                        <tr>
                            <td>
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                @Html.HiddenFor(model => model.Runners[@dex].Id)
                                @Html.HiddenFor(model => model.Runners[@dex].contactID)
                                @Html.EditorFor(model => model.Runners[@dex].firstName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Runners[@dex].firstName, "", new { @class = "text-danger" })
                            </td>
                            <td>
                                @Html.EditorFor(model => model.Runners[@dex].lastName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Runners[@dex].lastName, "", new { @class = "text-danger" })
                            </td>
                            <td style="display: inline-block; max-width: 80px;">
                                @Html.EditorFor(model => model.Runners[@dex].tShirt, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Runners[@dex].tShirt, "", new { @class = "text-danger" })
                            </td>
                        </tr>
                    }

                </table>
            </p>
        </div>
    
    </div>
    <div class=" row">
        <div class="col-md-offset-1 col-md-10">
            <input type="submit" value="Create" class="btn btn-default" />
        </div>
    </div>
}

<script type="text/javascript">
    var timeoutHandle;
    function phoneMask(inputName, evt) {
        clearTimeout(timeoutHandle);
        timeoutHandle = setTimeout(() => {
            try {
                var text = document.getElementById(inputName);
                var value = text.value,
                    first3,
                    second3,
                    last4;
                // console.log(value.length)
                var split = value.split('-');
                if (split.length == 1) {
                    if (value.length == 10) {
                        first3 = value.substring(0, 3);
                        second3 = value.substring(3, 6);
                        last4 = value.substring(6, 10);
                        // console.log(value, first3, second3, last4)

                        text.value = first3 + '-' + second3 + '-' + last4;
                    }
                    if (value.length >= 11) {
                        var area = value.substring(0, 1);
                        first3 = value.substring(1, 4);
                        second3 = value.substring(4, 7);
                        last4 = value.substring(7, 11);
                        // console.log(value, first3, second3, last4)

                        text.value = first3 + '-' + second3 + '-' + last4;
                    }
                } else {
                    // console.log(split,split[0].length)
                    if (split[0].length > 3) {
                        // console.log(split[0])
                        split[0] = split[0].substring(0, 3);
                    }
                    if (split[1].length > 3) {
                        // console.log(split[1])
                        split[1] = split[1].substring(0, 3);

                    }
                    if (split[2].length > 3) {
                        // console.log(split[2])
                        split[2] = split[2].substring(0, 4);

                    }
                    if (split[0].length >= 3 && split[1].length >= 3 && split[2].length >= 4) {
                        text.value = split[0] + '-' + split[1] + '-' + split[2];
                    }
                }

            } catch (e) { }
        }, 300);

    }
    
    $('form').validate();
    $("#confirm]").rules("add", {
        equalTo: "#email",
        ErrorMessage: {
            required: "email's not does not match."
        }
    });
</script>